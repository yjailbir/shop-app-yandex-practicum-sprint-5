/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.yjailbir.payment_service.controllers;

import jakarta.validation.Valid;
import ru.yjailbir.payment_service.dto.BalanceResponse;
import ru.yjailbir.payment_service.dto.ErrorResponse;
import ru.yjailbir.payment_service.dto.PaymentRequest;
import ru.yjailbir.payment_service.dto.PaymentResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.annotation.processing.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-04T21:17:01.787026800+03:00[Europe/Moscow]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * GET /balance/{userId} : Получить баланс пользователя
     * Возвращает текущий баланс на счету пользователя.
     *
     * @param userId Уникальный идентификатор пользователя (required)
     * @return Баланс успешно получен (status code 200)
     *         or Пользователь не найден (status code 404)
     */
    @Operation(
        operationId = "getBalance",
        summary = "Получить баланс пользователя",
        description = "Возвращает текущий баланс на счету пользователя.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Баланс успешно получен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BalanceResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Пользователь не найден", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/balance/{userId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<BalanceResponse>> getBalance(
        @Parameter(name = "userId", description = "Уникальный идентификатор пользователя", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"balance\" : 0.8008281904610115, \"userId\" : \"userId\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /pay : Провести платёж
     * Списывает сумму заказа с баланса пользователя.
     *
     * @param paymentRequest  (required)
     * @return Платёж успешно проведён (status code 200)
     *         or Недостаточно средств или некорректный запрос (status code 400)
     */
    @Operation(
        operationId = "makePayment",
        summary = "Провести платёж",
        description = "Списывает сумму заказа с баланса пользователя.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Платёж успешно проведён", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Недостаточно средств или некорректный запрос", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pay",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<PaymentResponse>> makePayment(
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody Mono<PaymentRequest> paymentRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"success\" : true, \"remainingBalance\" : 0.8008281904610115, \"message\" : \"message\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(paymentRequest).then(Mono.empty());

    }

}
